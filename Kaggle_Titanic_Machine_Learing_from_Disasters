{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 5101,
          "sourceType": "datasetVersion",
          "datasetId": 3064
        }
      ],
      "dockerImageVersionId": 30804,
      "isInternetEnabled": false,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ProgrammerDavid1/Data_Structure/blob/main/Kaggle_Titanic_Machine_Learing_from_Disasters\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "import kagglehub\n",
        "shuofxz_titanic_machine_learning_from_disaster_path = kagglehub.dataset_download('shuofxz/titanic-machine-learning-from-disaster')\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "e9yTMP7CxPYf"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load\n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n",
        "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.277831Z",
          "iopub.execute_input": "2024-12-11T12:46:49.278387Z",
          "iopub.status.idle": "2024-12-11T12:46:49.287097Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.278321Z",
          "shell.execute_reply": "2024-12-11T12:46:49.285875Z"
        },
        "id": "45rZrzTQxPYf",
        "outputId": "037bb288-1a41-40ec-8b70-e385fbb619c7"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "/kaggle/input/titanic-machine-learning-from-disaster/train.csv\n/kaggle/input/titanic-machine-learning-from-disaster/test.csv\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. csv 파일을 데이터프레임으로 로드하기\n",
        "tc = pd.read_csv(\"/kaggle/input/titanic-machine-learning-from-disaster/train.csv\")\n",
        "# pandas의 read_csv 메소드를 호출하여 train.csv 파일을 읽어오면, dataframe 형태로 반환합니다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.289235Z",
          "iopub.execute_input": "2024-12-11T12:46:49.289672Z",
          "iopub.status.idle": "2024-12-11T12:46:49.316047Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.289625Z",
          "shell.execute_reply": "2024-12-11T12:46:49.31475Z"
        },
        "id": "rux6Y6w1xPYg"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. 로드한 데이터 셋에 결측치가 있는지 확인하기\n",
        "tc.isnull().sum()\n",
        "# pandas의 isnull(), sum() 메소드를 호출하여 dataframe에 컬럼별 결측치 개수를 구한다. ( 0 -> 결측치 없음, 상수 -> 총 결측치 개수)​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.318522Z",
          "iopub.execute_input": "2024-12-11T12:46:49.319002Z",
          "iopub.status.idle": "2024-12-11T12:46:49.336462Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.31895Z",
          "shell.execute_reply": "2024-12-11T12:46:49.335187Z"
        },
        "id": "iOGzq8t2xPYg",
        "outputId": "0041677e-4977-4dbf-9e25-baae9e0fea3f"
      },
      "outputs": [
        {
          "execution_count": 177,
          "output_type": "execute_result",
          "data": {
            "text/plain": "PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. 학습 데이터 셋의 상위 5개 항목 출력\n",
        "tc.head(5)\n",
        "#  pandas의 head(n) 메소드를 사용하여 n개의 레코드를 출력한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.338168Z",
          "iopub.execute_input": "2024-12-11T12:46:49.33865Z",
          "iopub.status.idle": "2024-12-11T12:46:49.364145Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.3386Z",
          "shell.execute_reply": "2024-12-11T12:46:49.362853Z"
        },
        "id": "mgroCLvOxPYh",
        "outputId": "63a87a1d-ac5a-4d36-db76-b34c8d8c19dd"
      },
      "outputs": [
        {
          "execution_count": 178,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. 학습 데이터 셋의 각 필드 데이터 분포(평균, 최소값, 최대값 등)를 살펴보기\n",
        "tc.describe()\n",
        "# pandas의 describe메소드를 사용하여 레코드의 총 개수, 평균, 최소값, 최대값 등을 출력한다..​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.366937Z",
          "iopub.execute_input": "2024-12-11T12:46:49.367406Z",
          "iopub.status.idle": "2024-12-11T12:46:49.407533Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.367357Z",
          "shell.execute_reply": "2024-12-11T12:46:49.406278Z"
        },
        "id": "OZIFBDlWxPYh",
        "outputId": "d47a2a9a-fcae-4440-a407-827734225bb9"
      },
      "outputs": [
        {
          "execution_count": 179,
          "output_type": "execute_result",
          "data": {
            "text/plain": "       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 5. 각 컬럼의 데이터 타입 확인하기\n",
        "tc.dtypes\n",
        "# pandas의 dtypes 메소드를 사용하여 dataframe내의 컬럼 별 데이터 타입을 확인한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.408847Z",
          "iopub.execute_input": "2024-12-11T12:46:49.410044Z",
          "iopub.status.idle": "2024-12-11T12:46:49.421863Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.409975Z",
          "shell.execute_reply": "2024-12-11T12:46:49.420619Z"
        },
        "id": "0pMsXKrgxPYh",
        "outputId": "17a301fe-344f-4480-b6f9-22bc35a57bc1"
      },
      "outputs": [
        {
          "execution_count": 180,
          "output_type": "execute_result",
          "data": {
            "text/plain": "PassengerId      int64\nSurvived         int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nCabin           object\nEmbarked        object\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 6.  'Cabin', 'Embarked'필드에는 어떤 값이 있는지 확인하기\n",
        "tc.Cabin.unique()\n",
        "tc.Embarked.unique()\n",
        "# pandas의 unique 메소드를 사용하여 Series에 어떤 단일값들이 있는지 확인한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.423284Z",
          "iopub.execute_input": "2024-12-11T12:46:49.423692Z",
          "iopub.status.idle": "2024-12-11T12:46:49.441856Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.423646Z",
          "shell.execute_reply": "2024-12-11T12:46:49.440474Z"
        },
        "id": "MldrGjCcxPYh",
        "outputId": "4d4e2351-3d0a-437e-b7b8-c687c024234c"
      },
      "outputs": [
        {
          "execution_count": 181,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array(['S', 'C', 'Q', nan], dtype=object)"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 7. 생존한 사람, 사망한 사람의 수 확인하기\n",
        "survival = tc.Survived.sum()\n",
        "n_survival = tc.shape[0] - survival\n",
        "# pandas의 sum() 메서드 사용하여 Survival컬럼 값의 합으로 생존자의 수를 구하고 train 데이터프레임의 전체 레코드 수에서 survival의 값을 빼어 사망한 사람의 수를 구한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.443657Z",
          "iopub.execute_input": "2024-12-11T12:46:49.444208Z",
          "iopub.status.idle": "2024-12-11T12:46:49.454971Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.444139Z",
          "shell.execute_reply": "2024-12-11T12:46:49.45372Z"
        },
        "id": "KUo1e06JxPYh"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 8. 각 클래스('Pclass')별 탑승객 분포 확인하기\n",
        "tc['Pclass'].value_counts()\n",
        "# pandas의 value_count()메소드를 사용하여 승객의 지위(Pclass)별 분포를 확인한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.456439Z",
          "iopub.execute_input": "2024-12-11T12:46:49.456844Z",
          "iopub.status.idle": "2024-12-11T12:46:49.474964Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.456798Z",
          "shell.execute_reply": "2024-12-11T12:46:49.473643Z"
        },
        "id": "5QS76kvsxPYh",
        "outputId": "1b7b8a08-444e-457e-9ef3-cbf483db97c1"
      },
      "outputs": [
        {
          "execution_count": 183,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Pclass\n3    491\n1    216\n2    184\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. 성('Sex')별 탑승객 분표 확인하기\n",
        "tc['Sex'].value_counts()\n",
        "# pandas의 value_count()메소드를 사용하여 승객의 성(Sex)별 분포를 확인한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.479164Z",
          "iopub.execute_input": "2024-12-11T12:46:49.479677Z",
          "iopub.status.idle": "2024-12-11T12:46:49.495249Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.479623Z",
          "shell.execute_reply": "2024-12-11T12:46:49.493744Z"
        },
        "id": "30kMujT3xPYh",
        "outputId": "69dd7615-cbdf-441c-8b0c-be1439b2cc6e"
      },
      "outputs": [
        {
          "execution_count": 184,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Sex\nmale      577\nfemale    314\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 10. 탑승 위치('Embarked') 별 탑승객 분표 확인하기\n",
        "tc['Embarked'].value_counts()\n",
        "#  pandas의 value_count()메소드를 사용하여 승객의 Embarked 별 분포를 확인한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.496875Z",
          "iopub.execute_input": "2024-12-11T12:46:49.497378Z",
          "iopub.status.idle": "2024-12-11T12:46:49.518862Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.497322Z",
          "shell.execute_reply": "2024-12-11T12:46:49.517504Z"
        },
        "id": "cPGdbVa1xPYi",
        "outputId": "66f4b9fe-81a0-4424-c089-9e8d774017d7"
      },
      "outputs": [
        {
          "execution_count": 185,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Embarked\nS    644\nC    168\nQ     77\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 11.  'Embarked' 필드의 결측치는 값이 가장 많은 'S'로 할당하기\n",
        "tc['Embarked'] = tc['Embarked'].fillna('S')\n",
        "# pandas의 fillna()함수를 사용하여 결측치 값을 'S'로 바꾼다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.520109Z",
          "iopub.execute_input": "2024-12-11T12:46:49.520519Z",
          "iopub.status.idle": "2024-12-11T12:46:49.533411Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.520484Z",
          "shell.execute_reply": "2024-12-11T12:46:49.53224Z"
        },
        "id": "flgs33kbxPYi"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 12. 'Age' 필드의 결측치는 값이 중간값으로 할당하기\n",
        "tc['Age'] = tc['Age'].fillna(tc['Age'].median())\n",
        "# pandas의 median()메소드로 'Age'필드의 중간값을 가져와서 fillna()함수를 사용하여 'Age'필드의 중간값으로 'Age'필드의 결측치를 바꾼다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.535071Z",
          "iopub.execute_input": "2024-12-11T12:46:49.53561Z",
          "iopub.status.idle": "2024-12-11T12:46:49.553926Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.535555Z",
          "shell.execute_reply": "2024-12-11T12:46:49.552309Z"
        },
        "id": "-H7KMczgxPYi"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 13. 'Name'필드에서 신분을 나타내는 단어를 뽑아서 'Title' 필드에 할당하기\n",
        "tc['Title'] = tc['Name'].str.extract('([A-Za-z]+)\\.',expand = False)\n",
        "# pandas의 extract()메소드에 인자값으로 정규식을 전달해주면 해당되는 문자열을 추출해낸다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.555308Z",
          "iopub.execute_input": "2024-12-11T12:46:49.555836Z",
          "iopub.status.idle": "2024-12-11T12:46:49.575075Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.555782Z",
          "shell.execute_reply": "2024-12-11T12:46:49.574044Z"
        },
        "id": "Qa1kDdjmxPYi"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 14. 'Title' 필드의 카테고리를 6개의 항목으로 변경하기\n",
        "tc['Title'] = tc['Title'].replace(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer')\n",
        "tc['Title'] = tc['Title'].replace(['Jonkheer', 'Master'], 'Master')\n",
        "tc['Title'] = tc['Title'].replace(['Don', 'Sir', 'the Countess', 'Lady', 'Dona'], 'Royalty')\n",
        "tc['Title'] = tc['Title'].replace(['Mme', 'Ms', 'Mrs'], 'Mrs')\n",
        "tc['Title'] = tc['Title'].replace(['Mlle', 'Miss'], 'Miss')\n",
        "tc['Title'] = tc['Title'].replace(['Mr'], 'Mr')\n",
        "#  replace()메소를 사용하여 첫번째 인자에 해당하는 문자열을 두 번째 인자 문자열로 치환한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.576655Z",
          "iopub.execute_input": "2024-12-11T12:46:49.578085Z",
          "iopub.status.idle": "2024-12-11T12:46:49.600264Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.578005Z",
          "shell.execute_reply": "2024-12-11T12:46:49.59911Z"
        },
        "id": "h0abTxhSxPYi"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 15. 변수 y를 선언해서 학습할 목표변수(=종속변수)인 'Survived'필드값을 담기\n",
        "y = tc.Survived\n",
        "#  변수 y에 Survived컬럼을 할당한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.602137Z",
          "iopub.execute_input": "2024-12-11T12:46:49.602558Z",
          "iopub.status.idle": "2024-12-11T12:46:49.61494Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.602514Z",
          "shell.execute_reply": "2024-12-11T12:46:49.613529Z"
        },
        "id": "tJRYxIsrxPYi"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 16. 나이('Age') 필드를 그룹핑하여 'AgeGroup'필드 생성하여 할당하기\n",
        "bin = [ 0,18,25,35,60,100]\n",
        "group_names = ['Baby','Youth','YoungAdult','MiddleAged','Senior']\n",
        "tc['AgeGroup'] = pd.cut(tc['Age'],bins=bin,labels = group_names)\n",
        "tc['AgeGroup'].value_counts()\n",
        "#  0~18세: Baby 19~25세: Youth 26~35세: YoungAdult 36~60세: MiddleAged\n",
        "# 61~100세: Senior AgeGroup컬럼의 값들을 bin에 맞게 잘라서 각 bin을 group_names와 1대1 매칭시켜 분류한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.616546Z",
          "iopub.execute_input": "2024-12-11T12:46:49.616988Z",
          "iopub.status.idle": "2024-12-11T12:46:49.641785Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.61694Z",
          "shell.execute_reply": "2024-12-11T12:46:49.640563Z"
        },
        "id": "v0kMXVQDxPYi",
        "outputId": "8a2c788a-49d3-4c7e-d1f8-333e4cd0d66f"
      },
      "outputs": [
        {
          "execution_count": 191,
          "output_type": "execute_result",
          "data": {
            "text/plain": "AgeGroup\nYoungAdult    373\nMiddleAged    195\nYouth         162\nBaby          139\nSenior         22\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 01. 필요한 라이브러리 Import\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "# matplotlib의 pyplot, seaborn을 import한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.643397Z",
          "iopub.execute_input": "2024-12-11T12:46:49.643851Z",
          "iopub.status.idle": "2024-12-11T12:46:49.660478Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.643813Z",
          "shell.execute_reply": "2024-12-11T12:46:49.658944Z"
        },
        "id": "rAI669fSxPYi"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 02. 학습 데이터셋(train)의 데이터 분포확인하기\n",
        "sns.barplot(x='Pclass', y='Survived',hue = 'Sex', data = tc)\n",
        "# hist() 메소를 호출하여 train데이터의 각 컬럼에 대한 분포를 확인한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:49.661936Z",
          "iopub.execute_input": "2024-12-11T12:46:49.662341Z",
          "iopub.status.idle": "2024-12-11T12:46:50.130098Z",
          "shell.execute_reply.started": "2024-12-11T12:46:49.662303Z",
          "shell.execute_reply": "2024-12-11T12:46:50.128446Z"
        },
        "id": "gNxMFynXxPYi",
        "outputId": "5f876535-6a1b-472d-dee5-1dcb64d93fc2"
      },
      "outputs": [
        {
          "execution_count": 193,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<Axes: xlabel='Pclass', ylabel='Survived'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 03. 성별('Sex')의 생존여부('Survived') 데이터 분포확인하기 : barplot\n",
        "sns.barplot(x=tc['Sex'],y=tc['Survived'],hue = tc['Sex'], dodge = False)\n",
        "# seaborn의 barplot메소드를 호출하여 X축에는 성별, Y축에는 생존비율로 각각 지정하여 성별 별 생존자 분포를 확인한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:50.135724Z",
          "iopub.execute_input": "2024-12-11T12:46:50.136119Z",
          "iopub.status.idle": "2024-12-11T12:46:50.48986Z",
          "shell.execute_reply.started": "2024-12-11T12:46:50.136082Z",
          "shell.execute_reply": "2024-12-11T12:46:50.488271Z"
        },
        "id": "Ug7i14ulxPYi",
        "outputId": "69e2744d-c11e-4820-ecfd-0a7b6a9fb7e6"
      },
      "outputs": [
        {
          "execution_count": 194,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<Axes: xlabel='Sex', ylabel='Survived'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 04. 탑승 클래스('Pclass')별 + 성별('Sex') 생존여부('Survived') 데이터 분포확인하기 : barplot\n",
        "sns.barplot(x='Pclass',y='Survived',hue ='Sex', data = tc)\n",
        "# seaborn의 barplot메소드를 호출하여 각 Pclass내의 성별 별 생존률 분포를 확인한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:50.491382Z",
          "iopub.execute_input": "2024-12-11T12:46:50.491763Z",
          "iopub.status.idle": "2024-12-11T12:46:50.908363Z",
          "shell.execute_reply.started": "2024-12-11T12:46:50.491726Z",
          "shell.execute_reply": "2024-12-11T12:46:50.90713Z"
        },
        "id": "xoIcev2IxPYj",
        "outputId": "940baab4-8501-47f0-83d5-22259057c8a7"
      },
      "outputs": [
        {
          "execution_count": 195,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<Axes: xlabel='Pclass', ylabel='Survived'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 05. 전체 변수의 correlation에 대해 히트맵 그리기\n",
        "# plt.subplots(figsize = (8,6))\n",
        "# sns.heatmap(tc.corr(),annot = True,linewidths=2)\n",
        "# seaborn의 heatmap메소드에 tc 데이터의 상관계수를 인자로 넘겨주면 tc데이터의 전체 상관관계에 대한 히트맵을 반환한다"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:50.909765Z",
          "iopub.execute_input": "2024-12-11T12:46:50.910123Z",
          "iopub.status.idle": "2024-12-11T12:46:50.915229Z",
          "shell.execute_reply.started": "2024-12-11T12:46:50.910083Z",
          "shell.execute_reply": "2024-12-11T12:46:50.913936Z"
        },
        "id": "YQx_5yUCxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 06. 연령분포('AgeGroup')별 + 클래스('Pclass')별 생존여부('Survived') 데이터 분포확인하기: barplot\n",
        "sns.barplot(x='AgeGroup',y='Survived',hue= 'Pclass',data = tc)\n",
        "#  seaborn의 barplot메소드를 호출하여 각 AgeGroup 내의 성별 별 생존률 분포를 확인한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:50.916697Z",
          "iopub.execute_input": "2024-12-11T12:46:50.917152Z",
          "iopub.status.idle": "2024-12-11T12:46:51.622587Z",
          "shell.execute_reply.started": "2024-12-11T12:46:50.917116Z",
          "shell.execute_reply": "2024-12-11T12:46:51.621255Z"
        },
        "id": "alt_ee5kxPYj",
        "outputId": "a454bd40-3e95-4edd-ff30-e830fca91d9e"
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "/opt/conda/lib/python3.10/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n/opt/conda/lib/python3.10/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n",
          "output_type": "stream"
        },
        {
          "execution_count": 197,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<Axes: xlabel='AgeGroup', ylabel='Survived'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 07. 형제/자매수(\"SibSp\")별 + 클래스('Pclass') 별 생존여부(\"Survived\")\n",
        "sns.barplot(x='SibSp',y='Survived',hue = 'Pclass',data = tc,dodge = False)\n",
        "#  seaborn의 barplot메소드를 호출하여 각 형재/자매 수 컬럼 내의 성별 별 생존률 분포를 확인한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:51.624295Z",
          "iopub.execute_input": "2024-12-11T12:46:51.62476Z",
          "iopub.status.idle": "2024-12-11T12:46:52.227079Z",
          "shell.execute_reply.started": "2024-12-11T12:46:51.624704Z",
          "shell.execute_reply": "2024-12-11T12:46:52.225854Z"
        },
        "id": "CXMj3w02xPYj",
        "outputId": "fa4756cd-0b54-4d47-cfa8-9e26f6ccc244"
      },
      "outputs": [
        {
          "execution_count": 198,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<Axes: xlabel='SibSp', ylabel='Survived'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 01. 필요한 라이브러리 import\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "# scikit-learn의 LabelEncoder 모듈 import​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.228544Z",
          "iopub.execute_input": "2024-12-11T12:46:52.228932Z",
          "iopub.status.idle": "2024-12-11T12:46:52.234215Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.228896Z",
          "shell.execute_reply": "2024-12-11T12:46:52.232979Z"
        },
        "id": "MYSmTjuyxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 02. 학습을 위한 데이터 준비, 'Name', 'Ticket', 'SibSp', 'Parch', 'Cabin' , 'AgeGroup'컬럼 삭제하기\n",
        "tc = tc.drop(['Name','Ticket','SibSp','Parch','Cabin'],axis = 1)\n",
        "# drop메소드를 호출하여 Name, Ticket, SibSp, Parch, Cabin컬럼을 데이터프레임에서 삭제한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.235647Z",
          "iopub.execute_input": "2024-12-11T12:46:52.236268Z",
          "iopub.status.idle": "2024-12-11T12:46:52.25127Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.236215Z",
          "shell.execute_reply": "2024-12-11T12:46:52.25012Z"
        },
        "id": "NfK1qxkgxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 03. 모델링에 사용할 변수의 타입을 숫자로 변환\n",
        "tc['Sex'].dtypes\n",
        "tc['Sex'] = tc['Sex'].astype(str)\n",
        "\n",
        "label = LabelEncoder()\n",
        "for col in ['Sex','Embarked','Title','AgeGroup']:\n",
        "    tc[col] = label.fit_transform(tc[col])\n",
        "\n",
        "# 'Sex'컬럼값의 타입을 확인해보면 object타입인 걸 알 수 있다. LabelEncoder로 정수형 타입으로 바로 캐스팅이 불가능하기 때문에 우선 \"String\"타입으로 전환해준다.\n",
        "# LabelEncoder객체를 label 인스턴스로 생성하여 특정 컬럼의 타입을 정수형으로 변환해줄 준비를 한다.\n",
        "# 'Sex', 'Embarked', 'Title', 'AgeGroup' 네 개의 컬럼값들을 반복문을 통해 모두 정수형으로 변환해준다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.252814Z",
          "iopub.execute_input": "2024-12-11T12:46:52.253338Z",
          "iopub.status.idle": "2024-12-11T12:46:52.269684Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.253251Z",
          "shell.execute_reply": "2024-12-11T12:46:52.268482Z"
        },
        "id": "TxZeZa_CxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 04. 학습시킬 변수와 Label변수를 분리.\n",
        "X_train = tc[['PassengerId','Pclass','Sex','Age','Fare','Embarked','Title','AgeGroup']]\n",
        "Y_train = tc[['Survived']]\n",
        "#  X_train과 Y_train에 학습시킬 변수와 Label변수를 각각 분리한다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.271228Z",
          "iopub.execute_input": "2024-12-11T12:46:52.271677Z",
          "iopub.status.idle": "2024-12-11T12:46:52.284375Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.271627Z",
          "shell.execute_reply": "2024-12-11T12:46:52.283271Z"
        },
        "id": "Hhj4fFahxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 05.train dataset의 Survived컬럼과 다른 변수들 간의 상관관계를 확인.\n",
        "\n",
        "# corr()['컬럼명']을 호출하게 되면 해당 컬럼명과 다른 컬럼들 간의 상관관계를 리턴한다"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.285909Z",
          "iopub.execute_input": "2024-12-11T12:46:52.286368Z",
          "iopub.status.idle": "2024-12-11T12:46:52.297379Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.28632Z",
          "shell.execute_reply": "2024-12-11T12:46:52.296229Z"
        },
        "id": "vLjWmntQxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 01. 필요한 라이브러리 Import 및 모델 객체 생성\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "lr = LogisticRegression()\n",
        "#Logistic Regression 모델을 사용하기 위해 해당 모델 모듈을 Import 하였으며 LogisticRegression 객체를 생성하였다.​"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.298779Z",
          "iopub.execute_input": "2024-12-11T12:46:52.299136Z",
          "iopub.status.idle": "2024-12-11T12:46:52.318862Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.29909Z",
          "shell.execute_reply": "2024-12-11T12:46:52.317651Z"
        },
        "id": "QAaB_cZTxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 02. TEST dataset 로드하기.\n",
        "test = pd.read_csv('/kaggle/input/titanic-machine-learning-from-disaster/test.csv')\n",
        "print(test)\n",
        "# test dataset을 load한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.320301Z",
          "iopub.execute_input": "2024-12-11T12:46:52.320762Z",
          "iopub.status.idle": "2024-12-11T12:46:52.342847Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.320712Z",
          "shell.execute_reply": "2024-12-11T12:46:52.341691Z"
        },
        "id": "ACMnR2tVxPYj",
        "outputId": "e7514986-2177-44ea-e336-26ecca26f83f"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "     PassengerId  Pclass                                          Name  \\\n0            892       3                              Kelly, Mr. James   \n1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n2            894       2                     Myles, Mr. Thomas Francis   \n3            895       3                              Wirz, Mr. Albert   \n4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n..           ...     ...                                           ...   \n413         1305       3                            Spector, Mr. Woolf   \n414         1306       1                  Oliva y Ocana, Dona. Fermina   \n415         1307       3                  Saether, Mr. Simon Sivertsen   \n416         1308       3                           Ware, Mr. Frederick   \n417         1309       3                      Peter, Master. Michael J   \n\n        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n0      male  34.5      0      0              330911    7.8292   NaN        Q  \n1    female  47.0      1      0              363272    7.0000   NaN        S  \n2      male  62.0      0      0              240276    9.6875   NaN        Q  \n3      male  27.0      0      0              315154    8.6625   NaN        S  \n4    female  22.0      1      1             3101298   12.2875   NaN        S  \n..      ...   ...    ...    ...                 ...       ...   ...      ...  \n413    male   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n416    male   NaN      0      0              359309    8.0500   NaN        S  \n417    male   NaN      1      1                2668   22.3583   NaN        C  \n\n[418 rows x 11 columns]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 03. Test dataset null값 확인.\n",
        "test.isnull().sum()\n",
        "# test dataset의 Null값 유무를 확인한다. [결과] 'Age'컬럼과 'Fare' 그리고 'Cabin'컬럼에 null값들이 있는 것을 확인가능하다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.34431Z",
          "iopub.execute_input": "2024-12-11T12:46:52.344655Z",
          "iopub.status.idle": "2024-12-11T12:46:52.35401Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.344619Z",
          "shell.execute_reply": "2024-12-11T12:46:52.352876Z"
        },
        "id": "if4UcmRTxPYj",
        "outputId": "788128d4-7447-4e57-cbaf-78b819cb5325"
      },
      "outputs": [
        {
          "execution_count": 206,
          "output_type": "execute_result",
          "data": {
            "text/plain": "PassengerId      0\nPclass           0\nName             0\nSex              0\nAge             86\nSibSp            0\nParch            0\nTicket           0\nFare             1\nCabin          327\nEmbarked         0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 04. Test dataset null값 처리하기.\n",
        "test['Age'] = test['Age'].fillna(test['Age'].median())\n",
        "test['Fare'] = test['Fare'].fillna(test['Fare'].mean())\n",
        "# 'Age'컬럼의 null값들을 Age컬럼의 중앙값으로 대체한다. 'Fare'컬럼의 null값들을 Fare컬럼의 평균으로 대체한다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.355146Z",
          "iopub.execute_input": "2024-12-11T12:46:52.355509Z",
          "iopub.status.idle": "2024-12-11T12:46:52.368403Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.355462Z",
          "shell.execute_reply": "2024-12-11T12:46:52.367243Z"
        },
        "id": "mH1AC1rpxPYj"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 05. train 데이터셋과 차원 맞춰주기.\n",
        "test = test.drop(['Age','PassengerId', 'Name', 'Ticket', 'SibSp', 'Parch', 'Cabin', 'Embarked'], axis=1)\n",
        "# Train dataset과 동일한 컬럼만 나두고 나머지 컬럼을 모두 Drop시킨다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.369776Z",
          "iopub.execute_input": "2024-12-11T12:46:52.370128Z",
          "iopub.status.idle": "2024-12-11T12:46:52.383005Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.370083Z",
          "shell.execute_reply": "2024-12-11T12:46:52.381978Z"
        },
        "id": "KC91l_CKxPYk"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 06. 'Sex'컬럼을 Object형에서 Interger(Number)형으로 변환해주기.\n",
        "test['Sex'] = label.fit_transform(test['Sex'])\n",
        "# 'Sex'컬럼의 데이터 타입을 Object형에서 Integer형으로 변환해준다."
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:46:52.384279Z",
          "iopub.execute_input": "2024-12-11T12:46:52.384694Z",
          "iopub.status.idle": "2024-12-11T12:46:52.397819Z",
          "shell.execute_reply.started": "2024-12-11T12:46:52.384595Z",
          "shell.execute_reply": "2024-12-11T12:46:52.396567Z"
        },
        "id": "wqgp2oSWxPYk"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "#07.\n",
        "lr.fit(X_train, Y_train)\n",
        "# lr에 학습시키기"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:49:30.174235Z",
          "iopub.execute_input": "2024-12-11T12:49:30.17476Z",
          "iopub.status.idle": "2024-12-11T12:49:30.220961Z",
          "shell.execute_reply.started": "2024-12-11T12:49:30.174713Z",
          "shell.execute_reply": "2024-12-11T12:49:30.219342Z"
        },
        "id": "5u5Ys_jLxPYk",
        "outputId": "d7df4a1f-d2e0-4d37-f932-6586f56bbc49"
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n",
          "output_type": "stream"
        },
        {
          "execution_count": 217,
          "output_type": "execute_result",
          "data": {
            "text/plain": "LogisticRegression()",
            "text/html": "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# 08. Logistic Regression모델로 예측하기.\n",
        "pred = lr.predict(test)\n",
        "# 테스트 데이터 셋에 대한 예측을 수행"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-11T12:49:34.53533Z",
          "iopub.execute_input": "2024-12-11T12:49:34.535711Z",
          "iopub.status.idle": "2024-12-11T12:49:34.909217Z",
          "shell.execute_reply.started": "2024-12-11T12:49:34.535666Z",
          "shell.execute_reply": "2024-12-11T12:49:34.907634Z"
        },
        "id": "XEfk16IMxPYk",
        "outputId": "8ab0241f-d7cb-4746-f301-77bb7fdb4a46"
      },
      "outputs": [
        {
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[218], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# 08. Logistic Regression모델로 예측하기.\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m pred \u001b[38;5;241m=\u001b[39m \u001b[43mlr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# 테스트 데이터 셋에 대한 예측을 수행\u001b[39;00m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_base.py:419\u001b[0m, in \u001b[0;36mLinearClassifierMixin.predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    405\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    406\u001b[0m \u001b[38;5;124;03mPredict class labels for samples in X.\u001b[39;00m\n\u001b[1;32m    407\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[38;5;124;03m    Vector containing the class labels for each sample.\u001b[39;00m\n\u001b[1;32m    417\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    418\u001b[0m xp, _ \u001b[38;5;241m=\u001b[39m get_namespace(X)\n\u001b[0;32m--> 419\u001b[0m scores \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdecision_function\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    420\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(scores\u001b[38;5;241m.\u001b[39mshape) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    421\u001b[0m     indices \u001b[38;5;241m=\u001b[39m xp\u001b[38;5;241m.\u001b[39mastype(scores \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;28mint\u001b[39m)\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_base.py:400\u001b[0m, in \u001b[0;36mLinearClassifierMixin.decision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    397\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[1;32m    398\u001b[0m xp, _ \u001b[38;5;241m=\u001b[39m get_namespace(X)\n\u001b[0;32m--> 400\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    401\u001b[0m scores \u001b[38;5;241m=\u001b[39m safe_sparse_dot(X, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcoef_\u001b[38;5;241m.\u001b[39mT, dense_output\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m) \u001b[38;5;241m+\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mintercept_\n\u001b[1;32m    402\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m xp\u001b[38;5;241m.\u001b[39mreshape(scores, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m) \u001b[38;5;28;01mif\u001b[39;00m scores\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m scores\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/base.py:548\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    483\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_validate_data\u001b[39m(\n\u001b[1;32m    484\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    485\u001b[0m     X\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mno_validation\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    489\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_params,\n\u001b[1;32m    490\u001b[0m ):\n\u001b[1;32m    491\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Validate input data and set or check the `n_features_in_` attribute.\u001b[39;00m\n\u001b[1;32m    492\u001b[0m \n\u001b[1;32m    493\u001b[0m \u001b[38;5;124;03m    Parameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    546\u001b[0m \u001b[38;5;124;03m        validated.\u001b[39;00m\n\u001b[1;32m    547\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 548\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_feature_names\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreset\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    550\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_tags()[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrequires_y\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n\u001b[1;32m    551\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    552\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m estimator \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    553\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrequires y to be passed, but the target y is None.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    554\u001b[0m         )\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/base.py:481\u001b[0m, in \u001b[0;36mBaseEstimator._check_feature_names\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    476\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m missing_names \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m unexpected_names:\n\u001b[1;32m    477\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    478\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFeature names must be in the same order as they were in fit.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    479\u001b[0m     )\n\u001b[0;32m--> 481\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(message)\n",
            "\u001b[0;31mValueError\u001b[0m: The feature names should match those that were passed during fit.\nFeature names seen at fit time, yet now missing:\n- Age\n- AgeGroup\n- Embarked\n- PassengerId\n- Title\n"
          ],
          "ename": "ValueError",
          "evalue": "The feature names should match those that were passed during fit.\nFeature names seen at fit time, yet now missing:\n- Age\n- AgeGroup\n- Embarked\n- PassengerId\n- Title\n",
          "output_type": "error"
        }
      ],
      "execution_count": null
    }
  ]
}